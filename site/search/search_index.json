{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Core - ASV & ROV Robotics Platform Welcome to the Core repository - a comprehensive robotics platform for Autonomous Surface Vehicles (ASV) and Remotely Operated Vehicles (ROV) development and simulation. \ud83d\ude80 Overview This repository contains the core packages and simulation environments for developing and testing ASV and ROV systems. The platform integrates multiple simulation environments with a robust ROS2-based backend to provide a complete development ecosystem for marine robotics. \ud83c\udfd7\ufe0f Architecture Backend ROS2 : Primary communication framework Python : Core development language Mission Planning : Automated mission execution and behavior trees Simulation Environments Unity : ASV (Autonomous Surface Vehicle) simulation Godot : ROV (Remotely Operated Vehicle) simulation \ud83d\udcc1 Repository Structure core/ \u251c\u2500\u2500 core/ # Core ROS2 packages \u251c\u2500\u2500 core_behavior_tree/ # Mission behavior tree implementation \u251c\u2500\u2500 core_control/ # Control systems and algorithms \u251c\u2500\u2500 core_feature_test/ # Feature testing modules \u251c\u2500\u2500 core_msgs/ # Custom ROS2 message definitions \u251c\u2500\u2500 core_msgs_asv/ # ASV-specific message types \u251c\u2500\u2500 ros_docker_shenanigans/ # Docker configuration for ROS \u2514\u2500\u2500 scripts/ # Utility and deployment scripts \ud83e\udd16 Platforms Supported ASV (Autonomous Surface Vehicle) Simulation : Unity-based environment Features : Autonomous navigation Mission planning Surface vehicle dynamics Sensor integration ROV (Remotely Operated Vehicle) Simulation : Godot-based environment Features : Underwater vehicle control Teleoperation capabilities Underwater physics simulation Sensor modeling \ud83d\udee0\ufe0f Development Status \u26a0\ufe0f Note : This project is currently under active development. Both ASV and ROV simulations are in progress and may contain experimental features. Current Development Focus Mission planning and behavior tree implementation Simulation environment refinement Control system optimization Message protocol standardization \ud83d\ude80 Getting Started Prerequisites ROS2 (Humble/Iron recommended) Python 3.8+ Docker (for containerized deployment) Unity (for ASV simulation development) Godot (for ROV simulation development) Quick Setup Clone the repository bash git clone <repository-url> cd core Build ROS2 packages bash colcon build source install/setup.bash Run simulation (when available) ```bash # ASV simulation ros2 launch core_asv simulation.launch.py # ROV simulation ros2 launch core_rov simulation.launch.py ``` \ud83d\udccb Core Components Mission Planning Behavior tree-based mission execution Waypoint navigation Task sequencing and coordination Control Systems PID controllers for vehicle dynamics Adaptive control algorithms Safety and emergency protocols Communication Custom ROS2 message definitions Inter-vehicle communication protocols Ground station interface Simulation Physics-based vehicle models Environmental conditions modeling Sensor simulation and noise modeling \ud83d\udd27 Configuration Configuration files and parameters can be found in each respective package. Key configuration areas include: Vehicle parameters and dynamics Sensor configurations Mission planning parameters Communication settings \ud83d\udc1b Known Issues As this is an active development project, please check the Issues section for current known problems and their status. \ud83e\udd1d Contributing This project is under active development. For contribution guidelines and development workflows, please refer to the project maintainers. \ud83d\udcc4 Documentation Detailed documentation for each component will be available as the project matures. Current documentation includes: API documentation (auto-generated) Configuration guides Simulation setup instructions Development best practices \ud83d\udcde Support For questions, issues, or contributions, please use the GitHub Issues system or contact the development team. This documentation is for the Core ASV/ROV robotics platform. Last updated: June 2025","title":"Core - ASV & ROV Robotics Platform"},{"location":"#core-asv-rov-robotics-platform","text":"Welcome to the Core repository - a comprehensive robotics platform for Autonomous Surface Vehicles (ASV) and Remotely Operated Vehicles (ROV) development and simulation.","title":"Core - ASV &amp; ROV Robotics Platform"},{"location":"#overview","text":"This repository contains the core packages and simulation environments for developing and testing ASV and ROV systems. The platform integrates multiple simulation environments with a robust ROS2-based backend to provide a complete development ecosystem for marine robotics.","title":"\ud83d\ude80 Overview"},{"location":"#architecture","text":"","title":"\ud83c\udfd7\ufe0f Architecture"},{"location":"#backend","text":"ROS2 : Primary communication framework Python : Core development language Mission Planning : Automated mission execution and behavior trees","title":"Backend"},{"location":"#simulation-environments","text":"Unity : ASV (Autonomous Surface Vehicle) simulation Godot : ROV (Remotely Operated Vehicle) simulation","title":"Simulation Environments"},{"location":"#repository-structure","text":"core/ \u251c\u2500\u2500 core/ # Core ROS2 packages \u251c\u2500\u2500 core_behavior_tree/ # Mission behavior tree implementation \u251c\u2500\u2500 core_control/ # Control systems and algorithms \u251c\u2500\u2500 core_feature_test/ # Feature testing modules \u251c\u2500\u2500 core_msgs/ # Custom ROS2 message definitions \u251c\u2500\u2500 core_msgs_asv/ # ASV-specific message types \u251c\u2500\u2500 ros_docker_shenanigans/ # Docker configuration for ROS \u2514\u2500\u2500 scripts/ # Utility and deployment scripts","title":"\ud83d\udcc1 Repository Structure"},{"location":"#platforms-supported","text":"","title":"\ud83e\udd16 Platforms Supported"},{"location":"#asv-autonomous-surface-vehicle","text":"Simulation : Unity-based environment Features : Autonomous navigation Mission planning Surface vehicle dynamics Sensor integration","title":"ASV (Autonomous Surface Vehicle)"},{"location":"#rov-remotely-operated-vehicle","text":"Simulation : Godot-based environment Features : Underwater vehicle control Teleoperation capabilities Underwater physics simulation Sensor modeling","title":"ROV (Remotely Operated Vehicle)"},{"location":"#development-status","text":"\u26a0\ufe0f Note : This project is currently under active development. Both ASV and ROV simulations are in progress and may contain experimental features.","title":"\ud83d\udee0\ufe0f Development Status"},{"location":"#current-development-focus","text":"Mission planning and behavior tree implementation Simulation environment refinement Control system optimization Message protocol standardization","title":"Current Development Focus"},{"location":"#getting-started","text":"","title":"\ud83d\ude80 Getting Started"},{"location":"#prerequisites","text":"ROS2 (Humble/Iron recommended) Python 3.8+ Docker (for containerized deployment) Unity (for ASV simulation development) Godot (for ROV simulation development)","title":"Prerequisites"},{"location":"#quick-setup","text":"Clone the repository bash git clone <repository-url> cd core Build ROS2 packages bash colcon build source install/setup.bash Run simulation (when available) ```bash # ASV simulation ros2 launch core_asv simulation.launch.py # ROV simulation ros2 launch core_rov simulation.launch.py ```","title":"Quick Setup"},{"location":"#core-components","text":"","title":"\ud83d\udccb Core Components"},{"location":"#mission-planning","text":"Behavior tree-based mission execution Waypoint navigation Task sequencing and coordination","title":"Mission Planning"},{"location":"#control-systems","text":"PID controllers for vehicle dynamics Adaptive control algorithms Safety and emergency protocols","title":"Control Systems"},{"location":"#communication","text":"Custom ROS2 message definitions Inter-vehicle communication protocols Ground station interface","title":"Communication"},{"location":"#simulation","text":"Physics-based vehicle models Environmental conditions modeling Sensor simulation and noise modeling","title":"Simulation"},{"location":"#configuration","text":"Configuration files and parameters can be found in each respective package. Key configuration areas include: Vehicle parameters and dynamics Sensor configurations Mission planning parameters Communication settings","title":"\ud83d\udd27 Configuration"},{"location":"#known-issues","text":"As this is an active development project, please check the Issues section for current known problems and their status.","title":"\ud83d\udc1b Known Issues"},{"location":"#contributing","text":"This project is under active development. For contribution guidelines and development workflows, please refer to the project maintainers.","title":"\ud83e\udd1d Contributing"},{"location":"#documentation","text":"Detailed documentation for each component will be available as the project matures. Current documentation includes: API documentation (auto-generated) Configuration guides Simulation setup instructions Development best practices","title":"\ud83d\udcc4 Documentation"},{"location":"#support","text":"For questions, issues, or contributions, please use the GitHub Issues system or contact the development team. This documentation is for the Core ASV/ROV robotics platform. Last updated: June 2025","title":"\ud83d\udcde Support"}]}